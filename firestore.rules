rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check for required fields on create
    function hasRequiredFields(fields, data) {
      return fields.every(field -> field in data);
    }

    // --- phpFiles Collection ---
    match /phpFiles/{fileId} {
      allow read: if true; // Public read access

      allow create: if hasRequiredFields(['fileName', 'fileContent', 'uploadTimestamp'], request.resource.data)
                      && request.resource.data.fileName is string
                      && request.resource.data.fileContent is string
                      && request.resource.data.uploadTimestamp is string; // Timestamps sent as ISO strings
                      // userId check removed
                      
      allow update: if false; // Generally, PHP files shouldn't be updated once created
      allow delete: if false; // Protect uploaded data
    }

    // --- refactoringTasks Collection ---
    match /refactoringTasks/{taskId} {
      allow read: if true; // Public read access

      allow create: if hasRequiredFields(['phpFileId', 'originalCode', 'refactoredCode', 'refactoringTimestamp'], request.resource.data)
                      && request.resource.data.phpFileId is string
                      && request.resource.data.originalCode is string
                      && request.resource.data.refactoredCode is string
                      && request.resource.data.refactoringTimestamp is string // Timestamp sent as ISO string
                      && (request.resource.data.compatibilityReportId == null || request.resource.data.compatibilityReportId is string)
                      && (request.resource.data.cloudStorageUrl == null || request.resource.data.cloudStorageUrl is string);
                      // phpFileId existence check removed for simplicity as auth is removed

      allow update: if (request.resource.data.diff(resource.data).affectedKeys().hasOnly(['compatibilityReportId', 'cloudStorageUrl']))
                      && (request.resource.data.compatibilityReportId == null || request.resource.data.compatibilityReportId is string)
                      && (request.resource.data.cloudStorageUrl == null || request.resource.data.cloudStorageUrl is string);
                      // Ownership check removed

      allow delete: if false; // Protect task data
    }

    // --- compatibilityReports Collection ---
    match /compatibilityReports/{reportId} {
      allow read: if true; // Public read access

      allow create: if hasRequiredFields(['refactoringTaskId', 'reportContent', 'generationTimestamp'], request.resource.data)
                      && request.resource.data.refactoringTaskId is string
                      && request.resource.data.reportContent is string
                      && request.resource.data.generationTimestamp is string // Timestamp sent as ISO string
                      && (request.resource.data.pdfUrl == null || request.resource.data.pdfUrl is string)
                      && (request.resource.data.cloudStorageUrl == null || request.resource.data.cloudStorageUrl is string);
                      // refactoringTask ownership check removed for simplicity

      allow update: if (request.resource.data.diff(resource.data).affectedKeys().hasOnly(['pdfUrl', 'cloudStorageUrl']))
                       && (request.resource.data.pdfUrl == null || request.resource.data.pdfUrl is string)
                       && (request.resource.data.cloudStorageUrl == null || request.resource.data.cloudStorageUrl is string);
                      // Ownership check removed
                      
      allow delete: if false; // Protect report data
    }

    // --- cloudBucketScans Collection ---
    match /cloudBucketScans/{scanId} {
      allow read: if true; // Public read access
      
      allow create: if hasRequiredFields(['bucketName', 'scanTimestamp', 'phpFileIds', 'recursiveScan'], request.resource.data)
                      && request.resource.data.bucketName is string
                      && request.resource.data.scanTimestamp is string // Timestamp sent as ISO string
                      && request.resource.data.phpFileIds is list
                      && request.resource.data.recursiveScan is bool
                      && (request.resource.data.directoryPath == null || request.resource.data.directoryPath is string);
                      // userId check removed

      allow update: if false; // Scans are typically immutable once created
      allow delete: if false; // Protect scan history
    }

    // users collection rules removed
    // match /users/{userId} {
    //   allow read: if request.auth != null && request.auth.uid == userId;
    //   allow create: if request.auth != null && request.auth.uid == userId &&
    //                   hasRequiredFields(['email'], request.resource.data) &&
    //                   request.resource.data.email is string &&
    //                   (request.resource.data.username == null || request.resource.data.username is string);
    //   allow update: if request.auth != null && request.auth.uid == userId &&
    //                   (request.resource.data.diff(resource.data).affectedKeys().hasOnly(['username'])) &&
    //                   (request.resource.data.username == null || request.resource.data.username is string);
    //   allow delete: if false; // Users typically can't delete their own user record directly
    // }
  }
}
