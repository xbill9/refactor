
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if a user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }

    // Helper function to get a document's data if it exists and has data, otherwise null
    // This helps prevent accessing .data on a non-existent or empty document directly
    function getDocData(docPath) {
      let doc = get(docPath);
      // Check if doc exists and doc.data is not null
      if (exists(docPath) && doc.data != null) {
        return doc.data;
      }
      return null;
    }

    // Users:
    // - Can create their own user document.
    // - Can read and update their own user document.
    match /users/{userId} {
      allow create: if isAuthenticated() &&
                       request.auth.uid == userId && // User can only create their own doc
                       request.resource.data.id == userId &&
                       'email' in request.resource.data && // Ensure email is present
                       request.resource.data.email == request.auth.token.email;
      allow read, update: if isAuthenticated() && request.auth.uid == userId;
      allow delete: if false; // Deletion not allowed by default
    }

    // PhpFiles:
    // - Authenticated users can create, read, update, delete their own PhpFile documents.
    match /phpFiles/{phpFileId} {
      allow create: if isAuthenticated() &&
                       'userId' in request.resource.data && // Ensure userId is in incoming data
                       request.resource.data.userId == request.auth.uid && // Match with authenticated user
                       request.resource.data.id == phpFileId; // Ensure document ID matches path ID
      allow read, update, delete: if isAuthenticated() &&
                                     resource.data.userId == request.auth.uid; // For existing documents
    }

    // RefactoringTasks:
    // - Authenticated users can create tasks linked to their PhpFiles.
    // - Can read, update, delete tasks if they own the linked PhpFile.
    match /refactoringTasks/{taskId} {
      allow create: if isAuthenticated() &&
                       request.resource.data.id == taskId && // Check own ID first
                       'phpFileId' in request.resource.data && // Ensure phpFileId is present
                       request.resource.data.phpFileId != null && // Ensure it's not null
                       let phpFileDocData = getDocData(/databases/$(database)/documents/phpFiles/$(request.resource.data.phpFileId));
                       phpFileDocData != null && // Ensure linked PhpFile data exists
                       'userId' in phpFileDocData && // Ensure userId field exists in PhpFile
                       phpFileDocData.userId == request.auth.uid; // Check ownership of PhpFile
      allow read, update, delete: if isAuthenticated() &&
                                     'phpFileId' in resource.data && // Ensure phpFileId is in existing doc
                                     resource.data.phpFileId != null &&
                                     let phpFileDocData = getDocData(/databases/$(database)/documents/phpFiles/$(resource.data.phpFileId));
                                     phpFileDocData != null &&
                                     'userId' in phpFileDocData &&
                                     phpFileDocData.userId == request.auth.uid;
    }

    // CompatibilityReports:
    // - Authenticated users can create reports linked to their RefactoringTasks.
    // - Can read, update, delete reports if they own the linked PhpFile (via RefactoringTask).
    match /compatibilityReports/{reportId} {
      allow create: if isAuthenticated() &&
                       request.resource.data.id == reportId && // Check own ID first
                       'refactoringTaskId' in request.resource.data && // Ensure refactoringTaskId is present
                       request.resource.data.refactoringTaskId != null &&
                       let taskDocData = getDocData(/databases/$(database)/documents/refactoringTasks/$(request.resource.data.refactoringTaskId));
                       taskDocData != null && // Ensure linked Task data exists
                       'phpFileId' in taskDocData && // Ensure phpFileId field exists in Task
                       taskDocData.phpFileId != null &&
                       let phpFileDocData = getDocData(/databases/$(database)/documents/phpFiles/$(taskDocData.phpFileId));
                       phpFileDocData != null && // Ensure linked PhpFile data exists
                       'userId' in phpFileDocData && // Ensure userId field exists in PhpFile
                       phpFileDocData.userId == request.auth.uid; // Check ownership of PhpFile
      allow read, update, delete: if isAuthenticated() &&
                                     'refactoringTaskId' in resource.data && // Ensure refactoringTaskId is in existing doc
                                     resource.data.refactoringTaskId != null &&
                                     let taskDocData = getDocData(/databases/$(database)/documents/refactoringTasks/$(resource.data.refactoringTaskId));
                                     taskDocData != null &&
                                     'phpFileId' in taskDocData &&
                                     taskDocData.phpFileId != null &&
                                     let phpFileDocData = getDocData(/databases/$(database)/documents/phpFiles/$(taskDocData.phpFileId));
                                     phpFileDocData != null &&
                                     'userId' in phpFileDocData &&
                                     phpFileDocData.userId == request.auth.uid;
    }

    // CloudBucketScans:
    // - Authenticated users can create, read, update, delete their own CloudBucketScan documents.
    match /cloudBucketScans/{scanId} {
      allow create: if isAuthenticated() &&
                       'userId' in request.resource.data && // Ensure userId is in incoming data
                       request.resource.data.userId == request.auth.uid && // Match with authenticated user
                       request.resource.data.id == scanId; // Ensure document ID matches path ID
      allow read, update, delete: if isAuthenticated() &&
                                     resource.data.userId == request.auth.uid; // For existing documents
    }
  }
}
