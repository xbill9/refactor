
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }

    // Users collection
    // Users can create their own user document, and read/update their own.
    match /users/{userId} {
      allow read, update: if isAuthenticated() && request.auth.uid == userId;
      allow create: if isAuthenticated() && request.auth.uid == userId;
    }

    // PhpFiles collection
    // Users can create, read, update, and delete their own PHP files.
    match /phpFiles/{phpFileId} {
      allow read, update, delete: if isAuthenticated() && resource.data.userId == request.auth.uid;
      allow create: if isAuthenticated() && request.resource.data.userId == request.auth.uid;
    }

    // RefactoringTasks collection
    match /refactoringTasks/{taskId} {
      // Checks if the authenticated user owns the PHP file associated with the task.
      function isTaskOwner() {
        let phpFileId = (request.method == 'create' ? request.resource.data.phpFileId : resource.data.phpFileId);
        if (phpFileId == null) {
          return false;
        }
        let phpFileDoc = get(/databases/$(database)/documents/phpFiles/$(phpFileId));
        return phpFileDoc.exists && phpFileDoc.data.userId == request.auth.uid;
      }
      allow read, update, delete: if isAuthenticated() && isTaskOwner();
      allow create: if isAuthenticated() && isTaskOwner();
    }

    // CompatibilityReports collection
    match /compatibilityReports/{reportId} {
      // Checks if the authenticated user owns the PHP file associated with the report (via the refactoring task).
      function isReportOwnerViaTask() {
        let refactoringTaskId = (request.method == 'create' ? request.resource.data.refactoringTaskId : resource.data.refactoringTaskId);
        if (refactoringTaskId == null) {
          return false;
        }
        let taskDoc = get(/databases/$(database)/documents/refactoringTasks/$(refactoringTaskId));
        if (!taskDoc.exists || taskDoc.data.phpFileId == null) {
          return false;
        }
        let phpFileDoc = get(/databases/$(database)/documents/phpFiles/$(taskDoc.data.phpFileId));
        return phpFileDoc.exists && phpFileDoc.data.userId == request.auth.uid;
      }
      allow read, update, delete: if isAuthenticated() && isReportOwnerViaTask();
      allow create: if isAuthenticated() && isReportOwnerViaTask();
    }

    // CloudBucketScans collection
    // Users can create, read, update, and delete their own bucket scans.
    match /cloudBucketScans/{scanId} {
      allow read, update, delete: if isAuthenticated() && resource.data.userId == request.auth.uid;
      allow create: if isAuthenticated() && request.resource.data.userId == request.auth.uid;
    }
  }
}
