
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper Functions
    function isAuthenticated() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    // Helper to get document data safely, returns null if doc doesn't exist or has no data
    function getDocData(docPath) {
      let doc = get(docPath);
      if (doc.data != null) {
        return doc.data;
      }
      return null;
    }

    // --- User Profiles ---
    match /users/{userId} {
      allow read: if isAuthenticated();
      allow create: if isOwner(userId) &&
                       request.resource.data.id == userId &&
                       request.resource.data.email is string &&
                       (request.resource.data.username == null || request.resource.data.username is string) &&
                       request.resource.data.createdAt is timestamp; // Ensure createdAt is a timestamp on create
      allow update: if isOwner(userId) &&
                       request.resource.data.diff(resource.data).affectedKeys().hasOnly(['username']); // Allow only username updates for now
      allow delete: if false; // Generally, users should not delete their own profiles
    }

    // --- PHP Files ---
    match /phpFiles/{fileId} {
      allow read, delete: if isAuthenticated() && getDocData(path_to_phpFile(fileId)).userId == request.auth.uid;
      allow create: if isAuthenticated() &&
                       request.resource.data.userId == request.auth.uid &&
                       request.resource.data.id == fileId &&
                       request.resource.data.fileName is string &&
                       request.resource.data.fileContent is string &&
                       request.resource.data.uploadTimestamp is string; // As per schema

      allow update: if false; // PHP files are typically immutable after upload

      function path_to_phpFile(id) {
        return /databases/$(database)/documents/phpFiles/$(id);
      }
    }

    // --- Refactoring Tasks ---
    match /refactoringTasks/{taskId} {
      allow read, delete: if isAuthenticated() && isOwnerOfPhpFile(getDocData(path_to_task(taskId)).phpFileId);
      allow create: if isAuthenticated() &&
                       request.resource.data.id == taskId &&
                       request.resource.data.phpFileId is string && isOwnerOfPhpFile(request.resource.data.phpFileId) &&
                       request.resource.data.originalCode is string &&
                       request.resource.data.refactoredCode is string &&
                       (request.resource.data.compatibilityReportId == null || request.resource.data.compatibilityReportId is string) &&
                       request.resource.data.refactoringTimestamp is string && // As per schema
                       (request.resource.data.cloudStorageUrl == null || request.resource.data.cloudStorageUrl is string);
      allow update: if isAuthenticated() && isOwnerOfPhpFile(getDocData(path_to_task(taskId)).phpFileId) &&
                       (
                         (request.resource.data.diff(resource.data).affectedKeys().hasOnly(['compatibilityReportId']) && (request.resource.data.compatibilityReportId == null || request.resource.data.compatibilityReportId is string)) ||
                         (request.resource.data.diff(resource.data).affectedKeys().hasOnly(['cloudStorageUrl']) && (request.resource.data.cloudStorageUrl == null || request.resource.data.cloudStorageUrl is string))
                       );

      function path_to_task(id) {
        return /databases/$(database)/documents/refactoringTasks/$(id);
      }
      function isOwnerOfPhpFile(phpFileId) {
        let phpFileData = getDocData(/databases/$(database)/documents/phpFiles/$(phpFileId));
        return phpFileData != null && phpFileData.userId == request.auth.uid;
      }
    }

    // --- Compatibility Reports ---
    match /compatibilityReports/{reportId} {
      allow read, delete: if isAuthenticated() && isOwnerOfRefactoringTask(getDocData(path_to_report(reportId)).refactoringTaskId);
      allow create: if isAuthenticated() &&
                       request.resource.data.id == reportId &&
                       request.resource.data.refactoringTaskId is string && isOwnerOfRefactoringTask(request.resource.data.refactoringTaskId) &&
                       request.resource.data.reportContent is string &&
                       request.resource.data.generationTimestamp is string && // As per schema
                       (request.resource.data.pdfUrl == null || request.resource.data.pdfUrl is string) &&
                       (request.resource.data.cloudStorageUrl == null || request.resource.data.cloudStorageUrl is string);
      allow update: if isAuthenticated() && isOwnerOfRefactoringTask(getDocData(path_to_report(reportId)).refactoringTaskId) &&
                        (
                          (request.resource.data.diff(resource.data).affectedKeys().hasOnly(['pdfUrl']) && (request.resource.data.pdfUrl == null || request.resource.data.pdfUrl is string)) ||
                          (request.resource.data.diff(resource.data).affectedKeys().hasOnly(['cloudStorageUrl']) && (request.resource.data.cloudStorageUrl == null || request.resource.data.cloudStorageUrl is string))
                        );


      function path_to_report(id) {
        return /databases/$(database)/documents/compatibilityReports/$(id);
      }
      function isOwnerOfRefactoringTask(refactoringTaskId) {
        let taskData = getDocData(/databases/$(database)/documents/refactoringTasks/$(refactoringTaskId));
        return taskData != null && isOwnerOfPhpFileUsingTaskData(taskData);
      }
      function isOwnerOfPhpFileUsingTaskData(taskData) { // Helper to avoid direct call in isOwnerOfRefactoringTask for clarity
          if (taskData == null || !(taskData.phpFileId is string) ) {
            return false;
          }
          let phpFileData = getDocData(/databases/$(database)/documents/phpFiles/$(taskData.phpFileId));
          return phpFileData != null && phpFileData.userId == request.auth.uid;
      }
    }

    // --- Cloud Bucket Scans ---
    match /cloudBucketScans/{scanId} {
      allow read, delete: if isAuthenticated() && getDocData(path_to_scan(scanId)).userId == request.auth.uid;
      allow create: if isAuthenticated() &&
                       request.resource.data.id == scanId &&
                       request.resource.data.userId == request.auth.uid &&
                       request.resource.data.bucketName is string &&
                       (request.resource.data.directoryPath == null || request.resource.data.directoryPath is string) &&
                       request.resource.data.scanTimestamp is string && // As per schema
                       request.resource.data.phpFileIds is list &&
                       request.resource.data.recursiveScan is bool;
      allow update: if false; // Bucket scans are typically immutable

      function path_to_scan(id) {
        return /databases/$(database)/documents/cloudBucketScans/$(id);
      }
    }
  }
}
