
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper Functions
    function isAuthenticated() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    // Function to safely get data from a document path
    // Returns the document data if it exists, otherwise null (or a specific part if field is specified)
    function getDocData(docPath, field) {
      let doc = get(docPath);
      if (!doc.exists) {
        return null;
      }
      if (field != null) {
        return doc.data[field];
      }
      return doc.data;
    }

    // User profiles
    match /users/{userId} {
      allow read: if isAuthenticated();
      allow create: if isOwner(userId) &&
                       request.resource.data.id == userId &&
                       request.resource.data.email is string;
                       // username is optional
      allow update: if isOwner(userId) &&
                       request.resource.data.id == userId &&
                       request.resource.data.email is string &&
                       !(request.resource.data.keys().hasAny(['createdAt', 'id'])); // Prevent changing id or createdAt
    }

    // PHP Files
    match /phpFiles/{fileId} {
      allow read, update, delete: if isAuthenticated() && resource.data.userId == request.auth.uid;
      allow create: if isAuthenticated() &&
                       request.resource.data.userId == request.auth.uid &&
                       request.resource.data.fileName is string &&
                       request.resource.data.fileContent is string &&
                       request.resource.data.uploadTimestamp is timestamp;
    }

    // Refactoring Tasks
    match /refactoringTasks/{taskId} {
      allow read, delete: if isAuthenticated() && getDocData(/databases/$(database)/documents/phpFiles/$(resource.data.phpFileId), 'userId') == request.auth.uid;
      allow create: if isAuthenticated() &&
                       request.resource.data.phpFileId is string &&
                       getDocData(/databases/$(database)/documents/phpFiles/$(request.resource.data.phpFileId), 'userId') == request.auth.uid &&
                       request.resource.data.originalCode is string &&
                       request.resource.data.refactoredCode is string &&
                       request.resource.data.refactoringTimestamp is timestamp &&
                       (request.resource.data.compatibilityReportId == null || request.resource.data.compatibilityReportId is string) &&
                       (request.resource.data.cloudStorageUrl == null || request.resource.data.cloudStorageUrl is string);
      allow update: if isAuthenticated() &&
                       getDocData(/databases/$(database)/documents/phpFiles/$(resource.data.phpFileId), 'userId') == request.auth.uid &&
                       (
                         (request.resource.data.keys().hasOnly(['compatibilityReportId']) && (request.resource.data.compatibilityReportId is string || request.resource.data.compatibilityReportId == null) ) ||
                         (request.resource.data.keys().hasOnly(['cloudStorageUrl']) && (request.resource.data.cloudStorageUrl is string || request.resource.data.cloudStorageUrl == null) ) ||
                         (request.resource.data.keys().hasAll(['compatibilityReportId', 'cloudStorageUrl']) && (request.resource.data.compatibilityReportId is string || request.resource.data.compatibilityReportId == null) && (request.resource.data.cloudStorageUrl is string || request.resource.data.cloudStorageUrl == null) )
                       );
    }

    // Compatibility Reports
    match /compatibilityReports/{reportId} {
      function isTaskOwner() {
        let taskDocPath = /databases/$(database)/documents/refactoringTasks/$(resource.data.refactoringTaskId);
        let taskData = getDocData(taskDocPath, null); // Get the whole task document data
        if (taskData == null || taskData.phpFileId == null) {
          return false;
        }
        let phpFileDocPath = /databases/$(database)/documents/phpFiles/$(taskData.phpFileId);
        return getDocData(phpFileDocPath, 'userId') == request.auth.uid;
      }

      function isTaskOwnerForCreate() {
        let taskDocPath = /databases/$(database)/documents/refactoringTasks/$(request.resource.data.refactoringTaskId);
        let taskData = getDocData(taskDocPath, null);
         if (taskData == null || taskData.phpFileId == null) {
          return false;
        }
        let phpFileDocPath = /databases/$(database)/documents/phpFiles/$(taskData.phpFileId);
        return getDocData(phpFileDocPath, 'userId') == request.auth.uid;
      }

      allow read, delete: if isAuthenticated() && isTaskOwner();
      allow create: if isAuthenticated() &&
                       request.resource.data.refactoringTaskId is string &&
                       isTaskOwnerForCreate() &&
                       request.resource.data.reportContent is string &&
                       request.resource.data.generationTimestamp is timestamp &&
                       (request.resource.data.pdfUrl == null || request.resource.data.pdfUrl is string) &&
                       (request.resource.data.cloudStorageUrl == null || request.resource.data.cloudStorageUrl is string);
      allow update: if isAuthenticated() && isTaskOwner() &&
                      (
                        (request.resource.data.keys().hasOnly(['pdfUrl']) && (request.resource.data.pdfUrl is string || request.resource.data.pdfUrl == null)) ||
                        (request.resource.data.keys().hasOnly(['cloudStorageUrl']) && (request.resource.data.cloudStorageUrl is string || request.resource.data.cloudStorageUrl == null)) ||
                        (request.resource.data.keys().hasAll(['pdfUrl', 'cloudStorageUrl']) && (request.resource.data.pdfUrl is string || request.resource.data.pdfUrl == null) && (request.resource.data.cloudStorageUrl is string || request.resource.data.cloudStorageUrl == null) )
                      );
    }

    // Cloud Bucket Scans
    match /cloudBucketScans/{scanId} {
      allow read, update, delete: if isAuthenticated() && resource.data.userId == request.auth.uid;
      allow create: if isAuthenticated() &&
                       request.resource.data.userId == request.auth.uid &&
                       request.resource.data.bucketName is string &&
                       (request.resource.data.directoryPath == null || request.resource.data.directoryPath is string) &&
                       request.resource.data.scanTimestamp is timestamp &&
                       request.resource.data.phpFileIds is list &&
                       request.resource.data.recursiveScan is bool;
    }
  }
}

